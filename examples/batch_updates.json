{
  "sourceFile": "test_update.hpp",
  "updates": [
    {
      "entityPath": "Graphics::shutdownGraphics",
      "comment": "/**\n * @brief Shuts down the graphics system and releases all resources\n * @details This function performs cleanup operations for the graphics system,\n * including releasing GPU resources, closing rendering contexts, and\n * deallocating memory used by the graphics subsystem.\n * \n * @warning This function should only be called once at application shutdown.\n * Calling it multiple times or calling other graphics functions after\n * shutdown may result in undefined behavior.\n * \n * @see createRenderer()\n * @since 1.0.0\n */"
    },
    {
      "entityPath": "Graphics::Renderer2D::drawSprite",
      "comment": "/**\n * @brief Draws a sprite at the specified position\n * @details Renders a 2D sprite using the specified texture at the given\n * screen coordinates. The sprite will be drawn with its default size\n * and no rotation or scaling applied.\n * \n * @param texture The name or path of the texture to use for the sprite\n * @param x The X coordinate where the sprite should be drawn (in pixels)\n * @param y The Y coordinate where the sprite should be drawn (in pixels)\n * \n * @throws std::runtime_error if the texture cannot be loaded or found\n * @throws std::invalid_argument if the coordinates are outside valid range\n * \n * @note The coordinate system has origin (0,0) at the top-left corner\n * @since 1.0.0\n */"
    },
    {
      "entityPath": "g_debugMode",
      "comment": "/**\n * @brief Global debug mode flag\n * @details When set to true, enables debug output and additional\n * validation checks throughout the application. This variable\n * should only be modified during application initialization.\n * \n * @warning Modifying this flag during runtime may cause\n * inconsistent behavior in debug output.\n */"
    }
  ]
}
